version: 2.1

commands:
  install_aws:
    steps:
      - run:
          name: "Install AWS CLI"
          command: |
            apk add --no-cache python py-pip
            pip install awscli
            aws --version
  destroy-stacks:
    steps:
      - run:
          name: Destroy environment
          command: |
            aws s3 rb s3://udapeople-"${CIRCLE_WORKFLOW_ID:0:7}" --force
            aws cloudformation delete-stack --stack-name frontend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name backend-${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail 

  revert-migrations:
    steps:
      - run:
          name: "Revert migrations"
          command: |
            cd backend
            npm install
            if 
              (( $( curl -H "token: 366941c3-dc41-4cb0-87ca-36961c6ef2c9" --request GET https://api.memstash.io/values/migration_status ) == 0 )) ; \
            then 
              npm run migrations:revert
              echo "Reverting migrations"
            else
              echo "No migration to revert"
            fi
          when: on_fail
      - run:
          when: on_fail
          name: Prevents the workflow from continuing
          command: |
            circleci-agent step halt

jobs:

  build-frontend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build Frontend
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build Backend
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test Frontend
          command: |
            cd frontend
            npm i
            npm run test

  test-backend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test Backend
          command: |
            cd backend
            npm i
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - run:
          name: Audit Frontend
          command: |
            cd frontend
            npm i
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - run:
          name: Audit Backend
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - install_aws
      - run:
          name: Deploy Backend Infrastructure
          command: |
            cd .circleci/files
            aws cloudformation deploy \
            --template-file backend.yml \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --stack-name backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Deploy Frontend Infrastructure
          command: |
            cd .circleci/files
            aws cloudformation deploy \
            --template-file frontend.yml \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --stack-name frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add Backend EC2 Instance IP to inventory
          command: |
            aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            - project/.circleci/ansible/old_workflow.txt
      - destroy-stacks

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["03:d8:39:d9:5e:fb:fc:e9:12:0d:8e:c0:db:d1:ea:e1"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm
            pip install awscli
      - run:
          name: Add env file
          command: |
            echo "TYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS}" >> backend/.env
            echo "TYPEORM_ENTITIES=${TYPEORM_ENTITIES}" >> backend/.env
            echo "TYPEORM_CONNECTION=${TYPEORM_CONNECTION}" >> backend/.env
            echo "TYPEORM_HOST=${TYPEORM_HOST}" >> backend/.env
            echo "TYPEORM_PORT=${TYPEORM_PORT}" >> backend/.env
            echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> backend/.env
            echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> backend/.env
            echo "TYPEORM_DATABASE=${TYPEORM_DATABASE}" >> backend/.env
            echo "ENVIRONMENT=${ENVIRONMENT}" >> backend/.env
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            tar -czvf ../../backend.tar.gz ../../backend
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-stacks

  deploy-frontend-backend:
    docker:
      - image: circleci/python:3.8.2
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install tar gzip ansible nodejs npm
            pip install awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: install frontend dependencies
          command: |
            cd frontend
            npm install
            npm run build
      - run: 
          name: copy frontend files
          command: |
            pip install awscli
      - run: aws s3 cp frontend/dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}/ --recursive
      - destroy-stacks
      - revert-migrations

  smoke-test:
    docker:
      - image: circleci/python:3.8.2
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install tar gzip ansible nodejs npm
            pip install awscli
      - run:
          name: Smoke test backend
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            curl "${API_URL}/api/status"
      - run:
          name: Smoke test frontend
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            if curl -s ${URL} | grep "Welcome"
            then
              echo 0
            else
              echo 0
            fi
      - destroy-stacks
      - revert-migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: promote
          command: |  
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name "cloudfront-${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
  clean-up-old-stack:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Delete old stack
          command: |
            OLD_CIRCLE_WORKFLOW_ID=$(aws cloudformation list-exports --query "Exports[?Name=='WorkflowID'].Value" --output text)
            echo OLD_CIRCLE_WORKFLOW_ID=${OLD_CIRCLE_WORKFLOW_ID}
            STACKS=$(aws cloudformation list-stacks --region ${AWS_DEFAULT_REGION} --query "StackSummaries[*].StackName" --stack-status-filter UPDATE_COMPLETE CREATE_COMPLETE --output text)
            echo STACKS=${STACKS}
            aws cloudformation deploy \
              --stack-name udapeople-cloudfront \
              --template-file .circleci/files/cloudfront.yml \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
            if [ -n "${OLD_CIRCLE_WORKFLOW_ID}" ] && [[ "${STACKS[@]}" =~ "${OLD_CIRCLE_WORKFLOW_ID}" ]]
            then
              aws s3 rm s3://udapeople-${OLD_CIRCLE_WORKFLOW_ID}/ --recursive
              aws cloudformation delete-stack --stack-name frontend-${OLD_CIRCLE_WORKFLOW_ID}
              aws cloudformation delete-stack --stack-name backend-${OLD_CIRCLE_WORKFLOW_ID}
            fi
      - rollback

workflows:
  default:
    jobs:
      # - build-frontend
      # - test-frontend:
      #     requires: [build-frontend]
      # - build-backend:
      #     requires: [test-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [test-backend]
      # - scan-backend:
      #     requires: [scan-frontend]
      - deploy-infrastructure
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - deploy-frontend-backend:
          requires: [configure-infrastructure]
      # - smoke-test:
      #     requires: [deploy-frontend-backend]
      - cloudfront-update:
          requires: [deploy-frontend-backend]

